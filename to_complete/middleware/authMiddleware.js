const jwt = require("jsonwebtoken");
require("dotenv").config();

module.exports = function(req, res, next) {
  // R√©cup√©rer le token dans les cookies
  const token = req.cookies.tokenCookie;
  console.log(token);
  

  // V√©rifier si le token existe
  if (!token) {
    return res.status(401).send("Access denied. No token provided.");
  }

  // V√©rifier la validit√© du token
  try {
    const decoded = jwt.verify(token, process.env.SECRET_KEY);
    req.user = decoded;
    next();
  } catch (ex) {
    res.status(401).send("Invalid token.");
  }
};
























// 1. **R√©cup√©rer le token dans les cookies et v√©rifier s'il est valide avec `jwt.verify`** :
//    - Utilisez `req.cookies` pour acc√©der aux cookies et r√©cup√©rez le token.
//    - Utilisez `jwt.verify` pour v√©rifier la validit√© du token.

// 2. **Si le token est invalide, retourner une erreur 401** :
//    - Si la v√©rification √©choue, renvoyez une r√©ponse avec le statut 401 (Unauthorized).

// 3. **Si le token est valide, ajouter le contenu d√©cod√© du token dans `req.user`** :
//    - Si la v√©rification r√©ussit, ajoutez le contenu d√©cod√© du token √† `req.user` et appelez `next()` pour passer au middleware suivant.

// ### Code Compl√©t√©

// ```javascript
// const jwt = require('jsonwebtoken');

// module.exports = function(req, res, next) {
//   // R√©cup√©rer le token dans les cookies
//   const token = req.cookies.token;

//   // V√©rifier si le token existe
//   if (!token) {
//     return res.status(401).send("Access denied. No token provided.");
//   }

//   // V√©rifier la validit√© du token
//   try {
//     const decoded = jwt.verify(token, 'votre_secret');
//     req.user = decoded;
//     next();
//   } catch (ex) {
//     res.status(401).send("Invalid token.");
//   }
// };
// ```

// ### Explications

// - **R√©cup√©ration du Token** : `const token = req.cookies.token;` r√©cup√®re le token JWT stock√© dans le cookie nomm√© `token`.
// - **V√©rification de l'Existence du Token** : Si le token n'existe pas, une r√©ponse avec le statut 401 est renvoy√©e.
// - **V√©rification de la Validit√© du Token** : `jwt.verify(token, 'votre_secret')` v√©rifie le token en utilisant la cl√© secr√®te. Si le token est valide, son contenu d√©cod√© est ajout√© √† `req.user`.
// - **Gestion des Erreurs** : Si la v√©rification √©choue, une r√©ponse avec le statut 401 est renvoy√©e.

// Avec ce middleware, vous pouvez s√©curiser vos routes en v√©rifiant que les requ√™tes contiennent un token JWT valide. Si vous avez d'autres questions ou besoin de pr√©cisions suppl√©mentaires, n'h√©sitez pas √† demander ! üòä
